// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERED
  CANCELLED
}

enum PaymentCurrency {
  UYU
  USD
}

enum PaymentCountry {
  UY
  AR
}

// PaymentStatus
enum PaymentStatus {
  PENDING
  PAID
  REJECTED
  CANCELLED
  EXPIRED
}

enum PaymentExpirationType {
  MINUTES
  HOURS
  DAYS
}

model Order {
  id          String      @id @default(uuid())
  totalAmount Float       @default(0)
  totalItems  Int         @default(0)
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  contact_email String

  // Relations
  Items   OrderItem[]
  Payment Payment[]
  Receipt OrderReceipt?

  // Indexes
  @@index([status])
  @@index([createdAt])
  @@index([contact_email])
}

model OrderItem {
  id        String @id @default(uuid())
  productId Int
  name      String
  quantity  Int
  price     Float
  orderId   String
  Order     Order  @relation(fields: [orderId], references: [id])
}

model Payment {
  id               String                @id @default(uuid())
  name             String
  currency         PaymentCurrency       @default(UYU)
  amount           Float
  country          PaymentCountry        @default(UY)
  description      String
  expiration_type  PaymentExpirationType @default(MINUTES)
  expiration_value Int                   @default(15)

  status PaymentStatus @default(PENDING)

  contact_email String

  dlocal_payment_id String? @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  order    Order  @relation(fields: [order_id], references: [id])
  order_id String

  receipt OrderReceipt?

  logs PaymentLog[]

  // Indexes
  @@index([status])
  @@index([created_at])
  @@index([contact_email])
  @@index([dlocal_payment_id])
  @@index([order_id])
}

model PaymentLog {
  id              String        @id @default(uuid())
  log_description String
  payment_id      String
  status          PaymentStatus @default(PENDING)
  created_at      DateTime      @default(now())

  payment Payment @relation(fields: [payment_id], references: [id])
}

model OrderReceipt {
  id          String @id @default(uuid())
  receipt_url String

  // Relations
  order    Order  @relation(fields: [order_id], references: [id])
  order_id String @unique

  payment    Payment @relation(fields: [payment_id], references: [id])
  payment_id String  @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
